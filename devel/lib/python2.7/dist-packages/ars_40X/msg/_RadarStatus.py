# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ars_40X/RadarStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RadarStatus(genpy.Message):
  _md5sum = "d6ad107409c19b7574ba9aa33a2c30f7"
  _type = "ars_40X/RadarStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool read_status
bool write_status
int16 max_distance
bool persistent_error
bool interference
bool temperature_error
bool temporary_error
bool voltage_error
int8 sensor_id
int8 sort_index
int8 radar_power_cfg
bool ctrl_relay_cfg
int8 output_type_cfg
bool send_quality_cfg
bool send_ext_info_cfg
int8 motion_rx_state
bool rcs_threshold
"""
  __slots__ = ['read_status','write_status','max_distance','persistent_error','interference','temperature_error','temporary_error','voltage_error','sensor_id','sort_index','radar_power_cfg','ctrl_relay_cfg','output_type_cfg','send_quality_cfg','send_ext_info_cfg','motion_rx_state','rcs_threshold']
  _slot_types = ['bool','bool','int16','bool','bool','bool','bool','bool','int8','int8','int8','bool','int8','bool','bool','int8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       read_status,write_status,max_distance,persistent_error,interference,temperature_error,temporary_error,voltage_error,sensor_id,sort_index,radar_power_cfg,ctrl_relay_cfg,output_type_cfg,send_quality_cfg,send_ext_info_cfg,motion_rx_state,rcs_threshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.read_status is None:
        self.read_status = False
      if self.write_status is None:
        self.write_status = False
      if self.max_distance is None:
        self.max_distance = 0
      if self.persistent_error is None:
        self.persistent_error = False
      if self.interference is None:
        self.interference = False
      if self.temperature_error is None:
        self.temperature_error = False
      if self.temporary_error is None:
        self.temporary_error = False
      if self.voltage_error is None:
        self.voltage_error = False
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.sort_index is None:
        self.sort_index = 0
      if self.radar_power_cfg is None:
        self.radar_power_cfg = 0
      if self.ctrl_relay_cfg is None:
        self.ctrl_relay_cfg = False
      if self.output_type_cfg is None:
        self.output_type_cfg = 0
      if self.send_quality_cfg is None:
        self.send_quality_cfg = False
      if self.send_ext_info_cfg is None:
        self.send_ext_info_cfg = False
      if self.motion_rx_state is None:
        self.motion_rx_state = 0
      if self.rcs_threshold is None:
        self.rcs_threshold = False
    else:
      self.read_status = False
      self.write_status = False
      self.max_distance = 0
      self.persistent_error = False
      self.interference = False
      self.temperature_error = False
      self.temporary_error = False
      self.voltage_error = False
      self.sensor_id = 0
      self.sort_index = 0
      self.radar_power_cfg = 0
      self.ctrl_relay_cfg = False
      self.output_type_cfg = 0
      self.send_quality_cfg = False
      self.send_ext_info_cfg = False
      self.motion_rx_state = 0
      self.rcs_threshold = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bh5B3bBb2BbB().pack(_x.read_status, _x.write_status, _x.max_distance, _x.persistent_error, _x.interference, _x.temperature_error, _x.temporary_error, _x.voltage_error, _x.sensor_id, _x.sort_index, _x.radar_power_cfg, _x.ctrl_relay_cfg, _x.output_type_cfg, _x.send_quality_cfg, _x.send_ext_info_cfg, _x.motion_rx_state, _x.rcs_threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.read_status, _x.write_status, _x.max_distance, _x.persistent_error, _x.interference, _x.temperature_error, _x.temporary_error, _x.voltage_error, _x.sensor_id, _x.sort_index, _x.radar_power_cfg, _x.ctrl_relay_cfg, _x.output_type_cfg, _x.send_quality_cfg, _x.send_ext_info_cfg, _x.motion_rx_state, _x.rcs_threshold,) = _get_struct_2Bh5B3bBb2BbB().unpack(str[start:end])
      self.read_status = bool(self.read_status)
      self.write_status = bool(self.write_status)
      self.persistent_error = bool(self.persistent_error)
      self.interference = bool(self.interference)
      self.temperature_error = bool(self.temperature_error)
      self.temporary_error = bool(self.temporary_error)
      self.voltage_error = bool(self.voltage_error)
      self.ctrl_relay_cfg = bool(self.ctrl_relay_cfg)
      self.send_quality_cfg = bool(self.send_quality_cfg)
      self.send_ext_info_cfg = bool(self.send_ext_info_cfg)
      self.rcs_threshold = bool(self.rcs_threshold)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bh5B3bBb2BbB().pack(_x.read_status, _x.write_status, _x.max_distance, _x.persistent_error, _x.interference, _x.temperature_error, _x.temporary_error, _x.voltage_error, _x.sensor_id, _x.sort_index, _x.radar_power_cfg, _x.ctrl_relay_cfg, _x.output_type_cfg, _x.send_quality_cfg, _x.send_ext_info_cfg, _x.motion_rx_state, _x.rcs_threshold))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.read_status, _x.write_status, _x.max_distance, _x.persistent_error, _x.interference, _x.temperature_error, _x.temporary_error, _x.voltage_error, _x.sensor_id, _x.sort_index, _x.radar_power_cfg, _x.ctrl_relay_cfg, _x.output_type_cfg, _x.send_quality_cfg, _x.send_ext_info_cfg, _x.motion_rx_state, _x.rcs_threshold,) = _get_struct_2Bh5B3bBb2BbB().unpack(str[start:end])
      self.read_status = bool(self.read_status)
      self.write_status = bool(self.write_status)
      self.persistent_error = bool(self.persistent_error)
      self.interference = bool(self.interference)
      self.temperature_error = bool(self.temperature_error)
      self.temporary_error = bool(self.temporary_error)
      self.voltage_error = bool(self.voltage_error)
      self.ctrl_relay_cfg = bool(self.ctrl_relay_cfg)
      self.send_quality_cfg = bool(self.send_quality_cfg)
      self.send_ext_info_cfg = bool(self.send_ext_info_cfg)
      self.rcs_threshold = bool(self.rcs_threshold)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bh5B3bBb2BbB = None
def _get_struct_2Bh5B3bBb2BbB():
    global _struct_2Bh5B3bBb2BbB
    if _struct_2Bh5B3bBb2BbB is None:
        _struct_2Bh5B3bBb2BbB = struct.Struct("<2Bh5B3bBb2BbB")
    return _struct_2Bh5B3bBb2BbB

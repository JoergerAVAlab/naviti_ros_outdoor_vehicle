# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_pkg/INSPVAS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_pkg.msg

class INSPVAS(genpy.Message):
  _md5sum = "5ded1264f3f4858163c36b8d5bc38ed2"
  _type = "novatel_pkg/INSPVAS"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# INSPVAS Message ID: 508
# Author: Brandon Medellin
# Date: 2/1/2023

novatel_pkg/CommonShortHeader header

uint32 gnss_week
float64 gnss_seconds

float64 latitude
float64 longitude
float64 altitude

float64 north_velocity
float64 east_velocity
float64 up_velocity

float64 roll
float64 pitch
float64 azimuth

# Table 29 in the SPAN on OEM6 manual:
# See: http://www.novatel.com/assets/Documents/Manuals/OM-20000144UM.pdf#page=121
uint32 ins_status

================================================================================
MSG: novatel_pkg/CommonShortHeader
# Short Binary Header NovAtel OEM7
# Author: Brandon Medellin
# Date: 2/1/2023

# Message Length not including header (12 bytes) or CRC (4 byte)
uint8 length

# Message ID of the log being output.
uint16 id

# GNSS week number
uint16 gnss_week

# GNSS Miliseconds from beginning of GNSS week
int32 gnss_mili
"""
  __slots__ = ['header','gnss_week','gnss_seconds','latitude','longitude','altitude','north_velocity','east_velocity','up_velocity','roll','pitch','azimuth','ins_status']
  _slot_types = ['novatel_pkg/CommonShortHeader','uint32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,gnss_week,gnss_seconds,latitude,longitude,altitude,north_velocity,east_velocity,up_velocity,roll,pitch,azimuth,ins_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INSPVAS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = novatel_pkg.msg.CommonShortHeader()
      if self.gnss_week is None:
        self.gnss_week = 0
      if self.gnss_seconds is None:
        self.gnss_seconds = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.north_velocity is None:
        self.north_velocity = 0.
      if self.east_velocity is None:
        self.east_velocity = 0.
      if self.up_velocity is None:
        self.up_velocity = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.ins_status is None:
        self.ins_status = 0
    else:
      self.header = novatel_pkg.msg.CommonShortHeader()
      self.gnss_week = 0
      self.gnss_seconds = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.north_velocity = 0.
      self.east_velocity = 0.
      self.up_velocity = 0.
      self.roll = 0.
      self.pitch = 0.
      self.azimuth = 0.
      self.ins_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2HiI10dI().pack(_x.header.length, _x.header.id, _x.header.gnss_week, _x.header.gnss_mili, _x.gnss_week, _x.gnss_seconds, _x.latitude, _x.longitude, _x.altitude, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth, _x.ins_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = novatel_pkg.msg.CommonShortHeader()
      end = 0
      _x = self
      start = end
      end += 97
      (_x.header.length, _x.header.id, _x.header.gnss_week, _x.header.gnss_mili, _x.gnss_week, _x.gnss_seconds, _x.latitude, _x.longitude, _x.altitude, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth, _x.ins_status,) = _get_struct_B2HiI10dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2HiI10dI().pack(_x.header.length, _x.header.id, _x.header.gnss_week, _x.header.gnss_mili, _x.gnss_week, _x.gnss_seconds, _x.latitude, _x.longitude, _x.altitude, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth, _x.ins_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = novatel_pkg.msg.CommonShortHeader()
      end = 0
      _x = self
      start = end
      end += 97
      (_x.header.length, _x.header.id, _x.header.gnss_week, _x.header.gnss_mili, _x.gnss_week, _x.gnss_seconds, _x.latitude, _x.longitude, _x.altitude, _x.north_velocity, _x.east_velocity, _x.up_velocity, _x.roll, _x.pitch, _x.azimuth, _x.ins_status,) = _get_struct_B2HiI10dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2HiI10dI = None
def _get_struct_B2HiI10dI():
    global _struct_B2HiI10dI
    if _struct_B2HiI10dI is None:
        _struct_B2HiI10dI = struct.Struct("<B2HiI10dI")
    return _struct_B2HiI10dI

// Generated by gencpp from file ars_40X/RadarStatus.msg
// DO NOT EDIT!


#ifndef ARS_40X_MESSAGE_RADARSTATUS_H
#define ARS_40X_MESSAGE_RADARSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars_40X
{
template <class ContainerAllocator>
struct RadarStatus_
{
  typedef RadarStatus_<ContainerAllocator> Type;

  RadarStatus_()
    : read_status(false)
    , write_status(false)
    , max_distance(0)
    , persistent_error(false)
    , interference(false)
    , temperature_error(false)
    , temporary_error(false)
    , voltage_error(false)
    , sensor_id(0)
    , sort_index(0)
    , radar_power_cfg(0)
    , ctrl_relay_cfg(false)
    , output_type_cfg(0)
    , send_quality_cfg(false)
    , send_ext_info_cfg(false)
    , motion_rx_state(0)
    , rcs_threshold(false)  {
    }
  RadarStatus_(const ContainerAllocator& _alloc)
    : read_status(false)
    , write_status(false)
    , max_distance(0)
    , persistent_error(false)
    , interference(false)
    , temperature_error(false)
    , temporary_error(false)
    , voltage_error(false)
    , sensor_id(0)
    , sort_index(0)
    , radar_power_cfg(0)
    , ctrl_relay_cfg(false)
    , output_type_cfg(0)
    , send_quality_cfg(false)
    , send_ext_info_cfg(false)
    , motion_rx_state(0)
    , rcs_threshold(false)  {
  (void)_alloc;
    }



   typedef uint8_t _read_status_type;
  _read_status_type read_status;

   typedef uint8_t _write_status_type;
  _write_status_type write_status;

   typedef int16_t _max_distance_type;
  _max_distance_type max_distance;

   typedef uint8_t _persistent_error_type;
  _persistent_error_type persistent_error;

   typedef uint8_t _interference_type;
  _interference_type interference;

   typedef uint8_t _temperature_error_type;
  _temperature_error_type temperature_error;

   typedef uint8_t _temporary_error_type;
  _temporary_error_type temporary_error;

   typedef uint8_t _voltage_error_type;
  _voltage_error_type voltage_error;

   typedef int8_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef int8_t _sort_index_type;
  _sort_index_type sort_index;

   typedef int8_t _radar_power_cfg_type;
  _radar_power_cfg_type radar_power_cfg;

   typedef uint8_t _ctrl_relay_cfg_type;
  _ctrl_relay_cfg_type ctrl_relay_cfg;

   typedef int8_t _output_type_cfg_type;
  _output_type_cfg_type output_type_cfg;

   typedef uint8_t _send_quality_cfg_type;
  _send_quality_cfg_type send_quality_cfg;

   typedef uint8_t _send_ext_info_cfg_type;
  _send_ext_info_cfg_type send_ext_info_cfg;

   typedef int8_t _motion_rx_state_type;
  _motion_rx_state_type motion_rx_state;

   typedef uint8_t _rcs_threshold_type;
  _rcs_threshold_type rcs_threshold;





  typedef boost::shared_ptr< ::ars_40X::RadarStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars_40X::RadarStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RadarStatus_

typedef ::ars_40X::RadarStatus_<std::allocator<void> > RadarStatus;

typedef boost::shared_ptr< ::ars_40X::RadarStatus > RadarStatusPtr;
typedef boost::shared_ptr< ::ars_40X::RadarStatus const> RadarStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars_40X::RadarStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars_40X::RadarStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars_40X::RadarStatus_<ContainerAllocator1> & lhs, const ::ars_40X::RadarStatus_<ContainerAllocator2> & rhs)
{
  return lhs.read_status == rhs.read_status &&
    lhs.write_status == rhs.write_status &&
    lhs.max_distance == rhs.max_distance &&
    lhs.persistent_error == rhs.persistent_error &&
    lhs.interference == rhs.interference &&
    lhs.temperature_error == rhs.temperature_error &&
    lhs.temporary_error == rhs.temporary_error &&
    lhs.voltage_error == rhs.voltage_error &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.sort_index == rhs.sort_index &&
    lhs.radar_power_cfg == rhs.radar_power_cfg &&
    lhs.ctrl_relay_cfg == rhs.ctrl_relay_cfg &&
    lhs.output_type_cfg == rhs.output_type_cfg &&
    lhs.send_quality_cfg == rhs.send_quality_cfg &&
    lhs.send_ext_info_cfg == rhs.send_ext_info_cfg &&
    lhs.motion_rx_state == rhs.motion_rx_state &&
    lhs.rcs_threshold == rhs.rcs_threshold;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars_40X::RadarStatus_<ContainerAllocator1> & lhs, const ::ars_40X::RadarStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars_40X

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ars_40X::RadarStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars_40X::RadarStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars_40X::RadarStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars_40X::RadarStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars_40X::RadarStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars_40X::RadarStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars_40X::RadarStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6ad107409c19b7574ba9aa33a2c30f7";
  }

  static const char* value(const ::ars_40X::RadarStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6ad107409c19b75ULL;
  static const uint64_t static_value2 = 0x74ba9aa33a2c30f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars_40X::RadarStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars_40X/RadarStatus";
  }

  static const char* value(const ::ars_40X::RadarStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars_40X::RadarStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool read_status\n"
"bool write_status\n"
"int16 max_distance\n"
"bool persistent_error\n"
"bool interference\n"
"bool temperature_error\n"
"bool temporary_error\n"
"bool voltage_error\n"
"int8 sensor_id\n"
"int8 sort_index\n"
"int8 radar_power_cfg\n"
"bool ctrl_relay_cfg\n"
"int8 output_type_cfg\n"
"bool send_quality_cfg\n"
"bool send_ext_info_cfg\n"
"int8 motion_rx_state\n"
"bool rcs_threshold\n"
;
  }

  static const char* value(const ::ars_40X::RadarStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars_40X::RadarStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.read_status);
      stream.next(m.write_status);
      stream.next(m.max_distance);
      stream.next(m.persistent_error);
      stream.next(m.interference);
      stream.next(m.temperature_error);
      stream.next(m.temporary_error);
      stream.next(m.voltage_error);
      stream.next(m.sensor_id);
      stream.next(m.sort_index);
      stream.next(m.radar_power_cfg);
      stream.next(m.ctrl_relay_cfg);
      stream.next(m.output_type_cfg);
      stream.next(m.send_quality_cfg);
      stream.next(m.send_ext_info_cfg);
      stream.next(m.motion_rx_state);
      stream.next(m.rcs_threshold);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars_40X::RadarStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars_40X::RadarStatus_<ContainerAllocator>& v)
  {
    s << indent << "read_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.read_status);
    s << indent << "write_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.write_status);
    s << indent << "max_distance: ";
    Printer<int16_t>::stream(s, indent + "  ", v.max_distance);
    s << indent << "persistent_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.persistent_error);
    s << indent << "interference: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interference);
    s << indent << "temperature_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temperature_error);
    s << indent << "temporary_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temporary_error);
    s << indent << "voltage_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.voltage_error);
    s << indent << "sensor_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "sort_index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sort_index);
    s << indent << "radar_power_cfg: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar_power_cfg);
    s << indent << "ctrl_relay_cfg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_relay_cfg);
    s << indent << "output_type_cfg: ";
    Printer<int8_t>::stream(s, indent + "  ", v.output_type_cfg);
    s << indent << "send_quality_cfg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.send_quality_cfg);
    s << indent << "send_ext_info_cfg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.send_ext_info_cfg);
    s << indent << "motion_rx_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.motion_rx_state);
    s << indent << "rcs_threshold: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rcs_threshold);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS_40X_MESSAGE_RADARSTATUS_H

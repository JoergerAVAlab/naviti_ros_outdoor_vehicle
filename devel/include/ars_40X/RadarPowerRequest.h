// Generated by gencpp from file ars_40X/RadarPowerRequest.msg
// DO NOT EDIT!


#ifndef ARS_40X_MESSAGE_RADARPOWERREQUEST_H
#define ARS_40X_MESSAGE_RADARPOWERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ars_40X
{
template <class ContainerAllocator>
struct RadarPowerRequest_
{
  typedef RadarPowerRequest_<ContainerAllocator> Type;

  RadarPowerRequest_()
    : radar_power(0)  {
    }
  RadarPowerRequest_(const ContainerAllocator& _alloc)
    : radar_power(0)  {
  (void)_alloc;
    }



   typedef uint8_t _radar_power_type;
  _radar_power_type radar_power;





  typedef boost::shared_ptr< ::ars_40X::RadarPowerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars_40X::RadarPowerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RadarPowerRequest_

typedef ::ars_40X::RadarPowerRequest_<std::allocator<void> > RadarPowerRequest;

typedef boost::shared_ptr< ::ars_40X::RadarPowerRequest > RadarPowerRequestPtr;
typedef boost::shared_ptr< ::ars_40X::RadarPowerRequest const> RadarPowerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars_40X::RadarPowerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars_40X::RadarPowerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars_40X::RadarPowerRequest_<ContainerAllocator1> & lhs, const ::ars_40X::RadarPowerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.radar_power == rhs.radar_power;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars_40X::RadarPowerRequest_<ContainerAllocator1> & lhs, const ::ars_40X::RadarPowerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars_40X

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ars_40X::RadarPowerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars_40X::RadarPowerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars_40X::RadarPowerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars_40X::RadarPowerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars_40X::RadarPowerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars_40X::RadarPowerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars_40X::RadarPowerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1729e07afca5fdcd752c0c577b4694e3";
  }

  static const char* value(const ::ars_40X::RadarPowerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1729e07afca5fdcdULL;
  static const uint64_t static_value2 = 0x752c0c577b4694e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ars_40X::RadarPowerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars_40X/RadarPowerRequest";
  }

  static const char* value(const ::ars_40X::RadarPowerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars_40X::RadarPowerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Configures the transmitted radar power (Tx\n"
"# attenuation). The output RCS of cluster and objects\n"
"# will be compensated for this attenuation. Reducing\n"
"# the output power can improve detection in case of\n"
"# close range scenarios or inside rooms.\n"
"#\n"
"# Standard\n"
"# -3dB Tx gain\n"
"# -6dB Tx gain\n"
"# -9dB Tx gain\n"
"\n"
"uint8 radar_power\n"
;
  }

  static const char* value(const ::ars_40X::RadarPowerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars_40X::RadarPowerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radar_power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarPowerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars_40X::RadarPowerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars_40X::RadarPowerRequest_<ContainerAllocator>& v)
  {
    s << indent << "radar_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.radar_power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS_40X_MESSAGE_RADARPOWERREQUEST_H

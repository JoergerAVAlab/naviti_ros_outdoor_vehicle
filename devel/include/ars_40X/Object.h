// Generated by gencpp from file ars_40X/Object.msg
// DO NOT EDIT!


#ifndef ARS_40X_MESSAGE_OBJECT_H
#define ARS_40X_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/TwistWithCovariance.h>
#include <geometry_msgs/AccelWithCovariance.h>

namespace ars_40X
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : id(0)
    , position()
    , relative_velocity()
    , relative_acceleration()
    , length(0.0)
    , width(0.0)
    , orientation_angle(0.0)
    , rcs(0.0)
    , dynamic_property(0)
    , class_type(0)
    , meas_state(0)
    , prob_of_exist(0)  {
    }
  Object_(const ContainerAllocator& _alloc)
    : id(0)
    , position(_alloc)
    , relative_velocity(_alloc)
    , relative_acceleration(_alloc)
    , length(0.0)
    , width(0.0)
    , orientation_angle(0.0)
    , rcs(0.0)
    , dynamic_property(0)
    , class_type(0)
    , meas_state(0)
    , prob_of_exist(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  _relative_velocity_type;
  _relative_velocity_type relative_velocity;

   typedef  ::geometry_msgs::AccelWithCovariance_<ContainerAllocator>  _relative_acceleration_type;
  _relative_acceleration_type relative_acceleration;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;

   typedef float _orientation_angle_type;
  _orientation_angle_type orientation_angle;

   typedef float _rcs_type;
  _rcs_type rcs;

   typedef int8_t _dynamic_property_type;
  _dynamic_property_type dynamic_property;

   typedef int8_t _class_type_type;
  _class_type_type class_type;

   typedef int8_t _meas_state_type;
  _meas_state_type meas_state;

   typedef int8_t _prob_of_exist_type;
  _prob_of_exist_type prob_of_exist;





  typedef boost::shared_ptr< ::ars_40X::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ars_40X::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::ars_40X::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::ars_40X::Object > ObjectPtr;
typedef boost::shared_ptr< ::ars_40X::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ars_40X::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ars_40X::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ars_40X::Object_<ContainerAllocator1> & lhs, const ::ars_40X::Object_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.position == rhs.position &&
    lhs.relative_velocity == rhs.relative_velocity &&
    lhs.relative_acceleration == rhs.relative_acceleration &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.orientation_angle == rhs.orientation_angle &&
    lhs.rcs == rhs.rcs &&
    lhs.dynamic_property == rhs.dynamic_property &&
    lhs.class_type == rhs.class_type &&
    lhs.meas_state == rhs.meas_state &&
    lhs.prob_of_exist == rhs.prob_of_exist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ars_40X::Object_<ContainerAllocator1> & lhs, const ::ars_40X::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ars_40X

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ars_40X::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ars_40X::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars_40X::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ars_40X::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars_40X::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ars_40X::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ars_40X::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8964eb9576b0dc02d837314dcf39da9a";
  }

  static const char* value(const ::ars_40X::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8964eb9576b0dc02ULL;
  static const uint64_t static_value2 = 0xd837314dcf39da9aULL;
};

template<class ContainerAllocator>
struct DataType< ::ars_40X::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ars_40X/Object";
  }

  static const char* value(const ::ars_40X::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ars_40X::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n"
"\n"
"geometry_msgs/PoseWithCovariance position\n"
"geometry_msgs/TwistWithCovariance relative_velocity\n"
"geometry_msgs/AccelWithCovariance relative_acceleration\n"
"\n"
"float32 length\n"
"float32 width\n"
"float32 orientation_angle\n"
"\n"
"float32 rcs\n"
"int8 dynamic_property\n"
"int8 class_type\n"
"int8 meas_state\n"
"int8 prob_of_exist\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/AccelWithCovariance\n"
"# This expresses acceleration in free space with uncertainty.\n"
"\n"
"Accel accel\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::ars_40X::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ars_40X::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.relative_velocity);
      stream.next(m.relative_acceleration);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.orientation_angle);
      stream.next(m.rcs);
      stream.next(m.dynamic_property);
      stream.next(m.class_type);
      stream.next(m.meas_state);
      stream.next(m.prob_of_exist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ars_40X::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ars_40X::Object_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "relative_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_velocity);
    s << indent << "relative_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::AccelWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_acceleration);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "orientation_angle: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_angle);
    s << indent << "rcs: ";
    Printer<float>::stream(s, indent + "  ", v.rcs);
    s << indent << "dynamic_property: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dynamic_property);
    s << indent << "class_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.class_type);
    s << indent << "meas_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.meas_state);
    s << indent << "prob_of_exist: ";
    Printer<int8_t>::stream(s, indent + "  ", v.prob_of_exist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARS_40X_MESSAGE_OBJECT_H

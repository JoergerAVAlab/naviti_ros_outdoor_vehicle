// Generated by gencpp from file novatel_pkg/INSPVAS.msg
// DO NOT EDIT!


#ifndef NOVATEL_PKG_MESSAGE_INSPVAS_H
#define NOVATEL_PKG_MESSAGE_INSPVAS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <novatel_pkg/CommonShortHeader.h>

namespace novatel_pkg
{
template <class ContainerAllocator>
struct INSPVAS_
{
  typedef INSPVAS_<ContainerAllocator> Type;

  INSPVAS_()
    : header()
    , gnss_week(0)
    , gnss_seconds(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , ins_status(0)  {
    }
  INSPVAS_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gnss_week(0)
    , gnss_seconds(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , ins_status(0)  {
  (void)_alloc;
    }



   typedef  ::novatel_pkg::CommonShortHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _gnss_week_type;
  _gnss_week_type gnss_week;

   typedef double _gnss_seconds_type;
  _gnss_seconds_type gnss_seconds;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _north_velocity_type;
  _north_velocity_type north_velocity;

   typedef double _east_velocity_type;
  _east_velocity_type east_velocity;

   typedef double _up_velocity_type;
  _up_velocity_type up_velocity;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef uint32_t _ins_status_type;
  _ins_status_type ins_status;





  typedef boost::shared_ptr< ::novatel_pkg::INSPVAS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_pkg::INSPVAS_<ContainerAllocator> const> ConstPtr;

}; // struct INSPVAS_

typedef ::novatel_pkg::INSPVAS_<std::allocator<void> > INSPVAS;

typedef boost::shared_ptr< ::novatel_pkg::INSPVAS > INSPVASPtr;
typedef boost::shared_ptr< ::novatel_pkg::INSPVAS const> INSPVASConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_pkg::INSPVAS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_pkg::INSPVAS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_pkg::INSPVAS_<ContainerAllocator1> & lhs, const ::novatel_pkg::INSPVAS_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gnss_week == rhs.gnss_week &&
    lhs.gnss_seconds == rhs.gnss_seconds &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.north_velocity == rhs.north_velocity &&
    lhs.east_velocity == rhs.east_velocity &&
    lhs.up_velocity == rhs.up_velocity &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.azimuth == rhs.azimuth &&
    lhs.ins_status == rhs.ins_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_pkg::INSPVAS_<ContainerAllocator1> & lhs, const ::novatel_pkg::INSPVAS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::novatel_pkg::INSPVAS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_pkg::INSPVAS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_pkg::INSPVAS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_pkg::INSPVAS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_pkg::INSPVAS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_pkg::INSPVAS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_pkg::INSPVAS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ded1264f3f4858163c36b8d5bc38ed2";
  }

  static const char* value(const ::novatel_pkg::INSPVAS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ded1264f3f48581ULL;
  static const uint64_t static_value2 = 0x63c36b8d5bc38ed2ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_pkg::INSPVAS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_pkg/INSPVAS";
  }

  static const char* value(const ::novatel_pkg::INSPVAS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_pkg::INSPVAS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# INSPVAS Message ID: 508\n"
"# Author: Brandon Medellin\n"
"# Date: 2/1/2023\n"
"\n"
"novatel_pkg/CommonShortHeader header\n"
"\n"
"uint32 gnss_week\n"
"float64 gnss_seconds\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"\n"
"float64 north_velocity\n"
"float64 east_velocity\n"
"float64 up_velocity\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 azimuth\n"
"\n"
"# Table 29 in the SPAN on OEM6 manual:\n"
"# See: http://www.novatel.com/assets/Documents/Manuals/OM-20000144UM.pdf#page=121\n"
"uint32 ins_status\n"
"\n"
"================================================================================\n"
"MSG: novatel_pkg/CommonShortHeader\n"
"# Short Binary Header NovAtel OEM7\n"
"# Author: Brandon Medellin\n"
"# Date: 2/1/2023\n"
"\n"
"# Message Length not including header (12 bytes) or CRC (4 byte)\n"
"uint8 length\n"
"\n"
"# Message ID of the log being output.\n"
"uint16 id\n"
"\n"
"# GNSS week number\n"
"uint16 gnss_week\n"
"\n"
"# GNSS Miliseconds from beginning of GNSS week\n"
"int32 gnss_mili\n"
;
  }

  static const char* value(const ::novatel_pkg::INSPVAS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_pkg::INSPVAS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gnss_week);
      stream.next(m.gnss_seconds);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.north_velocity);
      stream.next(m.east_velocity);
      stream.next(m.up_velocity);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.azimuth);
      stream.next(m.ins_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSPVAS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_pkg::INSPVAS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_pkg::INSPVAS_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::novatel_pkg::CommonShortHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gnss_week: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gnss_week);
    s << indent << "gnss_seconds: ";
    Printer<double>::stream(s, indent + "  ", v.gnss_seconds);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "north_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.north_velocity);
    s << indent << "east_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.east_velocity);
    s << indent << "up_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.up_velocity);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "ins_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ins_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_PKG_MESSAGE_INSPVAS_H

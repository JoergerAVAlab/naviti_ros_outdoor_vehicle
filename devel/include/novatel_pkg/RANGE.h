// Generated by gencpp from file novatel_pkg/RANGE.msg
// DO NOT EDIT!


#ifndef NOVATEL_PKG_MESSAGE_RANGE_H
#define NOVATEL_PKG_MESSAGE_RANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <novatel_pkg/CommonLongHeader.h>

namespace novatel_pkg
{
template <class ContainerAllocator>
struct RANGE_
{
  typedef RANGE_<ContainerAllocator> Type;

  RANGE_()
    : header()
    , num_obs(0)
    , prn(0)
    , glofreq(0)
    , psr(0.0)
    , psr_sig(0.0)
    , adr(0.0)
    , adr_sig(0.0)
    , dopp(0.0)
    , c_no(0.0)
    , locktime(0.0)
    , ch_tr_status(0)  {
    }
  RANGE_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_obs(0)
    , prn(0)
    , glofreq(0)
    , psr(0.0)
    , psr_sig(0.0)
    , adr(0.0)
    , adr_sig(0.0)
    , dopp(0.0)
    , c_no(0.0)
    , locktime(0.0)
    , ch_tr_status(0)  {
  (void)_alloc;
    }



   typedef  ::novatel_pkg::CommonLongHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _num_obs_type;
  _num_obs_type num_obs;

   typedef uint16_t _prn_type;
  _prn_type prn;

   typedef uint16_t _glofreq_type;
  _glofreq_type glofreq;

   typedef double _psr_type;
  _psr_type psr;

   typedef float _psr_sig_type;
  _psr_sig_type psr_sig;

   typedef double _adr_type;
  _adr_type adr;

   typedef float _adr_sig_type;
  _adr_sig_type adr_sig;

   typedef float _dopp_type;
  _dopp_type dopp;

   typedef float _c_no_type;
  _c_no_type c_no;

   typedef float _locktime_type;
  _locktime_type locktime;

   typedef uint32_t _ch_tr_status_type;
  _ch_tr_status_type ch_tr_status;





  typedef boost::shared_ptr< ::novatel_pkg::RANGE_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_pkg::RANGE_<ContainerAllocator> const> ConstPtr;

}; // struct RANGE_

typedef ::novatel_pkg::RANGE_<std::allocator<void> > RANGE;

typedef boost::shared_ptr< ::novatel_pkg::RANGE > RANGEPtr;
typedef boost::shared_ptr< ::novatel_pkg::RANGE const> RANGEConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_pkg::RANGE_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_pkg::RANGE_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_pkg::RANGE_<ContainerAllocator1> & lhs, const ::novatel_pkg::RANGE_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.num_obs == rhs.num_obs &&
    lhs.prn == rhs.prn &&
    lhs.glofreq == rhs.glofreq &&
    lhs.psr == rhs.psr &&
    lhs.psr_sig == rhs.psr_sig &&
    lhs.adr == rhs.adr &&
    lhs.adr_sig == rhs.adr_sig &&
    lhs.dopp == rhs.dopp &&
    lhs.c_no == rhs.c_no &&
    lhs.locktime == rhs.locktime &&
    lhs.ch_tr_status == rhs.ch_tr_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_pkg::RANGE_<ContainerAllocator1> & lhs, const ::novatel_pkg::RANGE_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::novatel_pkg::RANGE_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_pkg::RANGE_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_pkg::RANGE_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_pkg::RANGE_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_pkg::RANGE_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_pkg::RANGE_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_pkg::RANGE_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec2ee37b6f94d56550d64b98028bbcfe";
  }

  static const char* value(const ::novatel_pkg::RANGE_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec2ee37b6f94d565ULL;
  static const uint64_t static_value2 = 0x50d64b98028bbcfeULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_pkg::RANGE_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_pkg/RANGE";
  }

  static const char* value(const ::novatel_pkg::RANGE_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_pkg::RANGE_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# RANGE ID: 43\n"
"# Put RANGEB for binary when connected with NovAtel Application Suite\n"
"# Author: Brandon Medellin\n"
"# Date: 2/1/2023\n"
"\n"
"novatel_pkg/CommonLongHeader header\n"
"\n"
"# Total number of observations for the log uniquely identified by the PRN\n"
"uint32 num_obs\n"
"\n"
"# ------------------------------------------------------------ \n"
"\n"
"# Satellite PRN number of range measurement\n"
"uint16 prn\n"
"\n"
"# GLONASS Frequency + 7\n"
"uint16 glofreq\n"
"\n"
"# Psuedorange measurement (m)\n"
"float64 psr\n"
"\n"
"# Psuedorange measurement standard deviation (m)\n"
"float32 psr_sig\n"
"\n"
"# Carrier phase, in cycles (accumulated Doppler range)\n"
"float64 adr\n"
"\n"
"# Estimated carrier phase standard deviation (cycles)\n"
"float32 adr_sig\n"
"\n"
"# Instantaneous carrier Doppler frequency (Hz)\n"
"float32 dopp\n"
"\n"
"# Carrier to noise density ratio\n"
"float32 c_no\n"
"\n"
"# Number of seconds of continuous tracking (no cycles slipping)\n"
"float32 locktime\n"
"\n"
"# Tracking status \n"
"uint32 ch_tr_status\n"
"\n"
"# ------------------------------------------------------------\n"
"\n"
"\n"
"================================================================================\n"
"MSG: novatel_pkg/CommonLongHeader\n"
"# Long Binary Header NovAtel\n"
"# Author: Brandon Medellin\n"
"# Date: 2/1/2023\n"
"\n"
"# Length of the header\n"
"uint8 head_length\n"
"\n"
"# Message ID of the log being output\n"
"uint16 id\n"
"\n"
"# Measurement source, format, response bit.\n"
"uint8 msg_type\n"
"\n"
"# Port address\n"
"uint8 port_addr\n"
"\n"
"# Message length not including header (25 bytes) nor CRC (4 bytes)\n"
"uint16 length\n"
"\n"
"# Used for multiple related logs. It is a number that counts down from N-1 to 0 where N is the number of related logs ...\n"
"uint16 sequence\n"
"\n"
"# Time the processor is idle, calculated once per second - more in documentation\n"
"uint8 idle_time\n"
"\n"
"# Indicates the quality of the gps reference time\n"
"uint8 time_status\n"
"\n"
"# GNSS week number\n"
"uint16 gnss_week\n"
"\n"
"# GNSS Miliseconds from beginning of GNSS week\n"
"int32 gnss_mili\n"
"\n"
"# Reserved for internal use\n"
"uint16 reserved\n"
"\n"
"# A value (0-65535) representing the receiver software build number\n"
"uint16 software_version\n"
"\n"
;
  }

  static const char* value(const ::novatel_pkg::RANGE_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_pkg::RANGE_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_obs);
      stream.next(m.prn);
      stream.next(m.glofreq);
      stream.next(m.psr);
      stream.next(m.psr_sig);
      stream.next(m.adr);
      stream.next(m.adr_sig);
      stream.next(m.dopp);
      stream.next(m.c_no);
      stream.next(m.locktime);
      stream.next(m.ch_tr_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RANGE_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_pkg::RANGE_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_pkg::RANGE_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::novatel_pkg::CommonLongHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_obs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_obs);
    s << indent << "prn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.prn);
    s << indent << "glofreq: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.glofreq);
    s << indent << "psr: ";
    Printer<double>::stream(s, indent + "  ", v.psr);
    s << indent << "psr_sig: ";
    Printer<float>::stream(s, indent + "  ", v.psr_sig);
    s << indent << "adr: ";
    Printer<double>::stream(s, indent + "  ", v.adr);
    s << indent << "adr_sig: ";
    Printer<float>::stream(s, indent + "  ", v.adr_sig);
    s << indent << "dopp: ";
    Printer<float>::stream(s, indent + "  ", v.dopp);
    s << indent << "c_no: ";
    Printer<float>::stream(s, indent + "  ", v.c_no);
    s << indent << "locktime: ";
    Printer<float>::stream(s, indent + "  ", v.locktime);
    s << indent << "ch_tr_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ch_tr_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_PKG_MESSAGE_RANGE_H

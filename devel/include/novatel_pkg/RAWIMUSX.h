// Generated by gencpp from file novatel_pkg/RAWIMUSX.msg
// DO NOT EDIT!


#ifndef NOVATEL_PKG_MESSAGE_RAWIMUSX_H
#define NOVATEL_PKG_MESSAGE_RAWIMUSX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <novatel_pkg/CommonShortHeader.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace novatel_pkg
{
template <class ContainerAllocator>
struct RAWIMUSX_
{
  typedef RAWIMUSX_<ContainerAllocator> Type;

  RAWIMUSX_()
    : header()
    , imu_info(0)
    , imu_type(0)
    , gnss_week(0)
    , gnss_seconds(0.0)
    , imu_status(0)
    , linear_acceleration()
    , angular_velocity()  {
    }
  RAWIMUSX_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , imu_info(0)
    , imu_type(0)
    , gnss_week(0)
    , gnss_seconds(0.0)
    , imu_status(0)
    , linear_acceleration(_alloc)
    , angular_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::novatel_pkg::CommonShortHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _imu_info_type;
  _imu_info_type imu_info;

   typedef uint8_t _imu_type_type;
  _imu_type_type imu_type;

   typedef uint16_t _gnss_week_type;
  _gnss_week_type gnss_week;

   typedef double _gnss_seconds_type;
  _gnss_seconds_type gnss_seconds;

   typedef uint32_t _imu_status_type;
  _imu_status_type imu_status;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;





  typedef boost::shared_ptr< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> const> ConstPtr;

}; // struct RAWIMUSX_

typedef ::novatel_pkg::RAWIMUSX_<std::allocator<void> > RAWIMUSX;

typedef boost::shared_ptr< ::novatel_pkg::RAWIMUSX > RAWIMUSXPtr;
typedef boost::shared_ptr< ::novatel_pkg::RAWIMUSX const> RAWIMUSXConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_pkg::RAWIMUSX_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_pkg::RAWIMUSX_<ContainerAllocator1> & lhs, const ::novatel_pkg::RAWIMUSX_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.imu_info == rhs.imu_info &&
    lhs.imu_type == rhs.imu_type &&
    lhs.gnss_week == rhs.gnss_week &&
    lhs.gnss_seconds == rhs.gnss_seconds &&
    lhs.imu_status == rhs.imu_status &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.angular_velocity == rhs.angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_pkg::RAWIMUSX_<ContainerAllocator1> & lhs, const ::novatel_pkg::RAWIMUSX_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5a6c96f74c4727c7a4eea6a9a18c400";
  }

  static const char* value(const ::novatel_pkg::RAWIMUSX_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5a6c96f74c4727cULL;
  static const uint64_t static_value2 = 0x7a4eea6a9a18c400ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_pkg/RAWIMUSX";
  }

  static const char* value(const ::novatel_pkg::RAWIMUSX_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# INSPVAS Message ID: 508\n"
"# Author: Brandon Medellin\n"
"# Date: 2/1/2023\n"
"\n"
"novatel_pkg/CommonShortHeader header\n"
"\n"
"# IMU Info Bits 0 -> IMU Error Detected, 1 -> IMU data is encrypted, 2 to 7 -> Reserved\n"
"uint8 imu_info\n"
"\n"
"# IMU Tyoe identifier\n"
"uint8 imu_type\n"
"\n"
"# GNSS Week\n"
"uint16 gnss_week\n"
"\n"
"# Seconds from GNSS week start\n"
"float64 gnss_seconds\n"
"\n"
"# Status of the IMU\n"
"uint32 imu_status\n"
"\n"
"# Linear Accelerations along Z, Y, X axes\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"\n"
"# Angular Velocity around Z, Y, X axes\n"
"geometry_msgs/Vector3 angular_velocity\n"
"\n"
"================================================================================\n"
"MSG: novatel_pkg/CommonShortHeader\n"
"# Short Binary Header NovAtel OEM7\n"
"# Author: Brandon Medellin\n"
"# Date: 2/1/2023\n"
"\n"
"# Message Length not including header (12 bytes) or CRC (4 byte)\n"
"uint8 length\n"
"\n"
"# Message ID of the log being output.\n"
"uint16 id\n"
"\n"
"# GNSS week number\n"
"uint16 gnss_week\n"
"\n"
"# GNSS Miliseconds from beginning of GNSS week\n"
"int32 gnss_mili\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::novatel_pkg::RAWIMUSX_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.imu_info);
      stream.next(m.imu_type);
      stream.next(m.gnss_week);
      stream.next(m.gnss_seconds);
      stream.next(m.imu_status);
      stream.next(m.linear_acceleration);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RAWIMUSX_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_pkg::RAWIMUSX_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_pkg::RAWIMUSX_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::novatel_pkg::CommonShortHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "imu_info: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_info);
    s << indent << "imu_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_type);
    s << indent << "gnss_week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gnss_week);
    s << indent << "gnss_seconds: ";
    Printer<double>::stream(s, indent + "  ", v.gnss_seconds);
    s << indent << "imu_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.imu_status);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_PKG_MESSAGE_RAWIMUSX_H
